// src/mock/test.ts
var test_default = [
  {
    url: "/test/get",
    method: "get",
    response: () => {
      return {
        code: 0,
        data: {
          name: "get",
          test: "\u4E2D\u6587\u6D4B\u8BD5"
        }
      };
    }
  },
  {
    url: "/test/post",
    method: "post",
    timeout: 2e3,
    response: {
      code: 0,
      data: {
        name: "post",
        test: "\u4E2D\u6587\u6D4B\u8BD5"
      }
    }
  },
  {
    url: "/test/put",
    method: "put",
    timeout: 2e3,
    response: {
      code: 0,
      data: {
        name: "put",
        test: "\u4E2D\u6587\u6D4B\u8BD5"
      }
    }
  },
  {
    url: "/test/delete",
    method: "delete",
    timeout: 2e3,
    response: {
      code: 0,
      data: {
        name: "delete",
        test: "\u4E2D\u6587\u6D4B\u8BD5"
      }
    }
  },
  {
    url: "/test/text",
    method: "post",
    rawResponse: async (req, res) => {
      let reqbody = "";
      await new Promise((resolve) => {
        req.on("data", (chunk) => {
          reqbody += chunk;
        });
        req.on("end", () => resolve(void 0));
      });
      res.setHeader("Content-Type", "application/json");
      res.statusCode = 500;
      res.end(`${reqbody}`);
    }
  }
];
export {
  test_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21vY2svdGVzdC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJEOlxcXFxldmVjb21cXFxccHJvamVjdFxcXFxzdXBlcnZpc2lvblxcXFx6aGpnLWNvbXBvbmVudFxcXFxleGFtcGxlc1xcXFxkZW1vXFxcXHNyY1xcXFxtb2NrXFxcXHRlc3QudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRDpcXFxcZXZlY29tXFxcXHByb2plY3RcXFxcc3VwZXJ2aXNpb25cXFxcemhqZy1jb21wb25lbnRcXFxcZXhhbXBsZXNcXFxcZGVtb1xcXFxzcmNcXFxcbW9ja1wiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vRDovZXZlY29tL3Byb2plY3Qvc3VwZXJ2aXNpb24vemhqZy1jb21wb25lbnQvZXhhbXBsZXMvZGVtby9zcmMvbW9jay90ZXN0LnRzXCI7aW1wb3J0IHsgTW9ja01ldGhvZCB9IGZyb20gJ3ZpdGUtcGx1Z2luLW1vY2snXG4vKiBcdThCRjdcdTZDNDJcdTRFMERcdTg5ODFcdThENzBcdTRFRTNcdTc0MDYgKi9cbmV4cG9ydCBkZWZhdWx0IFtcbiAge1xuICAgIHVybDogJy90ZXN0L2dldCcsXG4gICAgbWV0aG9kOiAnZ2V0JyxcbiAgICByZXNwb25zZTogKCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29kZTogMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG5hbWU6ICdnZXQnLFxuICAgICAgICAgIHRlc3Q6ICdcdTRFMkRcdTY1ODdcdTZENEJcdThCRDUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICB1cmw6ICcvdGVzdC9wb3N0JyxcbiAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICB0aW1lb3V0OiAyMDAwLFxuICAgIHJlc3BvbnNlOiB7XG4gICAgICBjb2RlOiAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiAncG9zdCcsXG4gICAgICAgIHRlc3Q6ICdcdTRFMkRcdTY1ODdcdTZENEJcdThCRDUnXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgdXJsOiAnL3Rlc3QvcHV0JyxcbiAgICBtZXRob2Q6ICdwdXQnLFxuICAgIHRpbWVvdXQ6IDIwMDAsXG4gICAgcmVzcG9uc2U6IHtcbiAgICAgIGNvZGU6IDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6ICdwdXQnLFxuICAgICAgICB0ZXN0OiAnXHU0RTJEXHU2NTg3XHU2RDRCXHU4QkQ1J1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIHVybDogJy90ZXN0L2RlbGV0ZScsXG4gICAgbWV0aG9kOiAnZGVsZXRlJyxcbiAgICB0aW1lb3V0OiAyMDAwLFxuICAgIHJlc3BvbnNlOiB7XG4gICAgICBjb2RlOiAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiAnZGVsZXRlJyxcbiAgICAgICAgdGVzdDogJ1x1NEUyRFx1NjU4N1x1NkQ0Qlx1OEJENSdcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICB1cmw6ICcvdGVzdC90ZXh0JyxcbiAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICByYXdSZXNwb25zZTogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgICBsZXQgcmVxYm9keSA9ICcnXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICByZXEub24oJ2RhdGEnLCAoY2h1bmspID0+IHtcbiAgICAgICAgICByZXFib2R5ICs9IGNodW5rXG4gICAgICAgIH0pXG4gICAgICAgIHJlcS5vbignZW5kJywgKCkgPT4gcmVzb2x2ZSh1bmRlZmluZWQpKVxuICAgICAgfSlcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgIHJlcy5zdGF0dXNDb2RlID0gNTAwXG4gICAgICByZXMuZW5kKGAke3JlcWJvZHl9YClcbiAgICB9XG4gIH1cbl0gYXMgTW9ja01ldGhvZFtdXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBRUEsSUFBTyxlQUFRO0FBQUEsRUFDYjtBQUFBLElBQ0UsS0FBSztBQUFBLElBQ0wsUUFBUTtBQUFBLElBQ1IsVUFBVSxNQUFNO0FBQ2QsYUFBTztBQUFBLFFBQ0wsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQUEsSUFDRSxLQUFLO0FBQUEsSUFDTCxRQUFRO0FBQUEsSUFDUixTQUFTO0FBQUEsSUFDVCxVQUFVO0FBQUEsTUFDUixNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsTUFDUjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElBQ0UsS0FBSztBQUFBLElBQ0wsUUFBUTtBQUFBLElBQ1IsU0FBUztBQUFBLElBQ1QsVUFBVTtBQUFBLE1BQ1IsTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLE1BQ1I7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBQ0E7QUFBQSxJQUNFLEtBQUs7QUFBQSxJQUNMLFFBQVE7QUFBQSxJQUNSLFNBQVM7QUFBQSxJQUNULFVBQVU7QUFBQSxNQUNSLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxNQUNSO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQUEsSUFDRSxLQUFLO0FBQUEsSUFDTCxRQUFRO0FBQUEsSUFDUixhQUFhLE9BQU8sS0FBSyxRQUFRO0FBQy9CLFVBQUksVUFBVTtBQUNkLFlBQU0sSUFBSSxRQUFRLENBQUMsWUFBWTtBQUM3QixZQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVU7QUFDeEIscUJBQVc7QUFBQSxRQUNiLENBQUM7QUFDRCxZQUFJLEdBQUcsT0FBTyxNQUFNLFFBQVEsTUFBUyxDQUFDO0FBQUEsTUFDeEMsQ0FBQztBQUNELFVBQUksVUFBVSxnQkFBZ0Isa0JBQWtCO0FBQ2hELFVBQUksYUFBYTtBQUNqQixVQUFJLElBQUksR0FBRyxPQUFPLEVBQUU7QUFBQSxJQUN0QjtBQUFBLEVBQ0Y7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K
